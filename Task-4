Q1: Student Management System with Custom Exceptions

class AgeNotWithinRangeException extends Exception {
    public AgeNotWithinRangeException(String message) {
        super(message);
    }
}

class NameNotValidException extends Exception {
    public NameNotValidException(String message) {
        super(message);
    }
}

class Student {
    private int rollNo;
    private String name;
    private int age;
    private String course;

    public Student(int rollNo, String name, int age, String course) 
            throws AgeNotWithinRangeException, NameNotValidException {

        if (age < 15 || age > 21) {
            throw new AgeNotWithinRangeException("Age must be between 15 and 21");
        }
        
        if (!name.matches("[a-zA-Z ]+")) {
            throw new NameNotValidException("Name can only contain letters and spaces");
        }

        this.rollNo = rollNo;
        this.name = name;
        this.age = age;
        this.course = course;
    }

    @Override
    public String toString() {
        return "Roll No: " + rollNo + ", Name: " + name + 
               ", Age: " + age + ", Course: " + course;
    }
}

public class StudentManagement {
    public static void main(String[] args) {
        try {
            Student s1 = new Student(101, "John Doe", 18, "Computer Science");
            System.out.println("Student created: " + s1);
            
            // This will throw AgeNotWithinRangeException
            // Student s2 = new Student(102, "Jane Smith", 22, "Mathematics");
            
            // This will throw NameNotValidException
            // Student s3 = new Student(103, "Ramesh123", 19, "Physics");
            
        } catch (AgeNotWithinRangeException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (NameNotValidException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

Q2: Voter Class with Age Validation

class InvalidAgeException extends Exception {
    public InvalidAgeException(String message) {
        super(message);
    }
}

class Voter {
    private int voterId;
    private String name;
    private int age;

    public Voter(int voterId, String name, int age) throws InvalidAgeException {
        if (age < 18) {
            throw new InvalidAgeException("Invalid age for voter");
        }
        this.voterId = voterId;
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "Voter ID: " + voterId + ", Name: " + name + ", Age: " + age;
    }
}

public class VoterRegistration {
    public static void main(String[] args) {
        try {
            Voter v1 = new Voter(1001, "Ramesh Kumar", 25);
            System.out.println("Voter created: " + v1);
            
            // This will throw InvalidAgeException
            Voter v2 = new Voter(1002, "Suresh Patel", 16);
            System.out.println("Voter created: " + v2);
            
        } catch (InvalidAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

Q3: Weekday Array with Exception Handling

import java.util.Scanner;

public class Weekdays {
    public static void main(String[] args) {
        String[] weekdays = {"Sunday", "Monday", "Tuesday", "Wednesday", 
                             "Thursday", "Friday", "Saturday"};
        
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter day position (0-6): ");
        
        try {
            int dayIndex = scanner.nextInt();
            System.out.println("Day name: " + weekdays[dayIndex]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Please enter a number between 0 and 6");
        } catch (Exception e) {
            System.out.println("Error: Invalid input");
        } finally {
            scanner.close();
        }
    }
}

Q4: Student Grades with HashMap

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class StudentGrades {
    private Map<String, Integer> gradeMap = new HashMap<>();

    public void addStudent(String name, int grade) {
        gradeMap.put(name, grade);
        System.out.println("Student added successfully!");
    }

    public void removeStudent(String name) {
        if (gradeMap.remove(name) != null) {
            System.out.println("Student removed successfully!");
        } else {
            System.out.println("Student not found!");
        }
    }

    public void displayGrade(String name) {
        Integer grade = gradeMap.get(name);
        if (grade != null) {
            System.out.println(name + "'s grade: " + grade);
        } else {
            System.out.println("Student not found!");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StudentGrades system = new StudentGrades();

        while (true) {
            System.out.println("\nStudent Grade System");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Display Grade");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    System.out.print("Enter student name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter student grade: ");
                    int grade = scanner.nextInt();
                    system.addStudent(name, grade);
                    break;
                case 2:
                    System.out.print("Enter student name to remove: ");
                    system.removeStudent(scanner.nextLine());
                    break;
                case 3:
                    System.out.print("Enter student name to display grade: ");
                    system.displayGrade(scanner.nextLine());
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}

Q5: Stack Implementation using Collections

import java.util.Stack;
import java.util.Scanner;

public class IntegerStack {
    private Stack<Integer> stack = new Stack<>();

    public void pushElement(int num) {
        stack.push(num);
        System.out.println(num + " pushed to stack");
    }

    public void popElement() {
        if (!stack.isEmpty()) {
            System.out.println(stack.pop() + " popped from stack");
        } else {
            System.out.println("Stack is empty!");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        IntegerStack intStack = new IntegerStack();

        while (true) {
            System.out.println("\nInteger Stack Operations");
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter number to push: ");
                    intStack.pushElement(scanner.nextInt());
                    break;
                case 2:
                    intStack.popElement();
                    break;
                case 3:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
